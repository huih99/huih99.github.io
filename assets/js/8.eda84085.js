(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{250:function(_,v,e){_.exports=e.p+"assets/img/image-20210323103036231.8c964455.png"},251:function(_,v,e){_.exports=e.p+"assets/img/image-20210323102606727.f7d1d1ee.png"},252:function(_,v,e){_.exports=e.p+"assets/img/image-20210323102945343.4eda66cd.png"},253:function(_,v,e){_.exports=e.p+"assets/img/image-20210621141810782.caf3ecbb.png"},285:function(_,v,e){"use strict";e.r(v);var o=e(0),c=Object(o.a)({},function(){var _=this,v=_.$createElement,o=_._self._c||v;return o("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[o("h1",{attrs:{id:"cache-policy"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#cache-policy","aria-hidden":"true"}},[_._v("#")]),_._v(" cache_policy")]),_._v(" "),o("h2",{attrs:{id:"一、浏览器中刷新与强制刷新的区别"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#一、浏览器中刷新与强制刷新的区别","aria-hidden":"true"}},[_._v("#")]),_._v(" 一、浏览器中刷新与强制刷新的区别")]),_._v(" "),o("p",[_._v("以本地测试服务器为例：")]),_._v(" "),o("p",[_._v("浏览器在"),o("strong",[_._v("刷新")]),_._v("时，请求头如下")]),_._v(" "),o("p",[o("img",{attrs:{src:e(250),alt:"image-20210323103036231"}})]),_._v(" "),o("p",[_._v("重点关注头部中的"),o("code",[_._v("Cache-control:max-age=0")])]),_._v(" "),o("p",[_._v("浏览器在"),o("strong",[_._v("强制刷新")]),_._v("时，请求头如下")]),_._v(" "),o("p",[o("img",{attrs:{src:e(251),alt:"image-20210323102606727"}})]),_._v(" "),o("p",[_._v("重点关注头部中的"),o("code",[_._v("Cache-Control：no-cache")])]),_._v(" "),o("p",[_._v("可以看到，这两种刷新方式的"),o("code",[_._v("Cache-Control")]),_._v("是有区别的")]),_._v(" "),o("p",[_._v("在请求头中：")]),_._v(" "),o("p",[o("code",[_._v("Cache-Control: no-cache")]),_._v(" :  表示不想使用缓存（无论本地是否有缓存），我要直接向服务器取最新的结果")]),_._v(" "),o("p",[o("code",[_._v("Cache-Control: max-age=0")]),_._v(" : 表示本地缓存已经不是最新的了（无论本地缓存是否过期），需要重新向服务器验证（协商缓存）")]),_._v(" "),o("p",[_._v("当在请求头中使用 "),o("code",[_._v("Cache-Control：no-cache")]),_._v("时,浏览器不会再发送"),o("code",[_._v("If-Modified-Since")]),_._v("和"),o("code",[_._v("If-None-Match")]),_._v(" 请求头，意味着一定要重新请求新资源")]),_._v(" "),o("p",[_._v("可以得出结论，在浏览器刷新和强制刷新时，都不会直接走本地缓存，而是会向服务器进行验证")]),_._v(" "),o("p",[_._v("那么如何验证当前缓存资源是否已失效呢？这就要说到"),o("strong",[_._v("协商缓存")]),_._v("了")]),_._v(" "),o("p",[_._v("##　二、协商缓存")]),_._v(" "),o("p",[_._v("在HTTP/1.1规范中，主要使用两个头部字段来确定资源是否变动，分别为"),o("code",[_._v("If-Modified-Since")]),_._v("和"),o("code",[_._v("If-None-Match")])]),_._v(" "),o("p",[_._v("请求资源的响应头如下：")]),_._v(" "),o("p",[_._v("响应头如下：")]),_._v(" "),o("p",[o("img",{attrs:{src:e(252),alt:"image-20210323102945343"}})]),_._v(" "),o("p",[_._v("​")]),_._v(" "),o("p",[_._v("响应头中的"),o("code",[_._v("Last-Modified")]),_._v("和"),o("code",[_._v("ETag")]),_._v("：")]),_._v(" "),o("ol",[o("li",[_._v("Last-Modified： 标识资源最后更新时间")]),_._v(" "),o("li",[_._v("ETag：通过摘要算法计算出来的资源标识")])]),_._v(" "),o("p",[_._v("当浏览器发送请求的请求头中包含"),o("code",[_._v("If-Modified-Since")]),_._v("和"),o("code",[_._v("If-None-Match")]),_._v("时，即需要与服务端确认资源的新鲜度，"),o("code",[_._v("If-Modified-Since")]),_._v("字段的值即为上一次从请求缓存到本地资源时的头部信息中"),o("code",[_._v("Last-Modified")]),_._v("的值,而"),o("code",[_._v("If-None-Match")]),_._v("字段的值则为上一次缓存资源时的头部信息中的"),o("code",[_._v("ETag")]),_._v("字段的值。当请求头中同时发送了"),o("code",[_._v("If-Modified-Since")]),_._v("和"),o("code",[_._v("If-None-Match")]),_._v("字段时，"),o("code",[_._v("If-None-Match")]),_._v("具有更高的优先级。")]),_._v(" "),o("p",[_._v("当"),o("code",[_._v("If-Modiffied-Since")]),_._v("的值与资源最后更新时间比较相同，即判断可以使用缓存，服务端状态码返回304，浏览器继续使用本地缓存")]),_._v(" "),o("p",[_._v("当"),o("code",[_._v("If-None-Match")]),_._v("与服务端中的最新资源的标识相同时，即判断可以使用缓存，服务端状态码返回304， 浏览器继续使用本地缓存")]),_._v(" "),o("p",[_._v("通过"),o("code",[_._v("If-None-Match")]),_._v("确认的结果准确度更高，因为有可能文件资源的最后更新时间改变了，但是内容却没有改变，这样使用"),o("code",[_._v("If-Modified-Since")]),_._v("去判断就无法使用缓存，需要重新发送一次相同的资源。")]),_._v(" "),o("h2",{attrs:{id:"三、cache-policy"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#三、cache-policy","aria-hidden":"true"}},[_._v("#")]),_._v(" 三、cache_policy")]),_._v(" "),o("ol",[o("li",[o("p",[_._v("当请求的响应头中没有与缓存相关的头部字段时，例如："),o("code",[_._v("Cache-Control")]),_._v("、"),o("code",[_._v("Exppires")]),_._v(",浏览器会缓存对应资源吗？")]),_._v(" "),o("p",[_._v("当没有设置缓存策略的头部字段时，浏览器会根据响应头中是否有"),o("code",[_._v("Last-Modified")]),_._v("字段决定是否要缓存，如果有则会被缓存，因为当什么缓存策略都没有设置的时候，浏览器会采用一个启发式的算法，通常会取响应头中的 Date 减去 Last-Modified 值的 10% 作为缓存时间。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("cache-control")]),_._v("常用值：")]),_._v(" "),o("p",[_._v("（1）"),o("strong",[_._v("public")]),_._v("：所有内容都将被缓存（客户端和代理服务器都可缓存）")]),_._v(" "),o("p",[_._v("（2）"),o("strong",[_._v("private")]),_._v("：所有内容只有客户端可以缓存，"),o("strong",[_._v("Cache-Control的默认取值")])]),_._v(" "),o("p",[_._v("（3）"),o("strong",[_._v("no-cache")]),_._v("：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定")]),_._v(" "),o("p",[_._v("（4）"),o("strong",[_._v("no-store")]),_._v("：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存")]),_._v(" "),o("p",[_._v("（5）"),o("strong",[_._v("max-age=xxx (xxx is numeric)")]),_._v("：缓存内容将在xxx秒后失效")])]),_._v(" "),o("li",[o("p",[_._v("协商缓存与强缓存")])])]),_._v(" "),o("ul",[o("li",[o("p",[_._v("协商缓存：指需要跟服务器确认资源的新鲜度，如果资源未更新，则返回304状态码，告知浏览器使用本地缓存")])]),_._v(" "),o("li",[o("p",[_._v("强缓存：直接走本地缓存，不经过服务端，不会向服务端发起请求，状态码为200，但是在network面板中可以看见"),o("strong",[_._v("from disk cache")]),_._v("或者 "),o("strong",[_._v("from memory cache")]),_._v("标识。")]),_._v(" "),o("p",[o("img",{attrs:{src:e(253),alt:"image-20210621141810782"}})])])])])},[],!1,null,null,null);v.default=c.exports}}]);